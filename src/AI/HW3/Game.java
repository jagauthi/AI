package HW3;
import java.util.ArrayList;
import java.util.Random;

class Game
{
	static int populationSize = 20;
	static int numGenes = 291;
	static double mutationRate = 0.1;
	static double crossoverRate = 0.5;
	
	static double[] evolveWeights() throws Exception
	{
		// Create a random initial population
		Random r = new Random();
		Matrix population = new Matrix(populationSize, numGenes);
		for(int i = 0; i < populationSize; i++)
		{
			double[] chromosome = population.row(i);
			for(int j = 0; j < chromosome.length; j++)
				chromosome[j] = 0.03 * r.nextGaussian();
		}
		
		int numIterations = 0;
		while(Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(population.row(0))) != -1) {
			System.out.println("Generation " + (numIterations+1));
			//mutate current population
			for(int y = 0; y < populationSize; y++) {
				for(int x = 0; x < numGenes; x++) {
					if(Math.random() <= mutationRate) {
						population.changeValue(x, y, (byte) Math.round(Math.random()));
					}
				}
			}
			
			//Natural selection: have two random ones fight, one wins and one dies
			for(int i = 0; i < 5; i++) {
				int fighter1 = (int) (Math.random() * population.rows());
				int fighter2 = (int) (Math.random() * population.rows());
				while( fighter1 == fighter2)
					fighter2 = (int) (Math.random() * population.rows());
				if(Controller.doBattleNoGui(new NeuralAgent(population.row(fighter1)), new NeuralAgent(population.row(fighter2))) == 1) {
					if(Math.random() > 0.25)
						population.killRow(fighter2);
					else
						population.killRow(fighter1);
				}
				else if(Controller.doBattleNoGui(new NeuralAgent(population.row(fighter1)), new NeuralAgent(population.row(fighter2))) == -1){
					if(Math.random() > 0.25)
						population.killRow(fighter1);
					else
						population.killRow(fighter2);
				}
				else {
					if(Math.random() > 0.5)
						population.killRow(fighter1);
					else
						population.killRow(fighter2);
				}
					
			}
			
			//Make new babies to fill in the deaths (using crossover)
			int numReplacements = populationSize - population.rows();
			for(int i = 0; i < numReplacements; i++) {
				int parent1 = (int) (Math.random() * population.rows());
				int parent2 = (int) (Math.random() * population.rows());
				while( parent1 == parent2)
					parent2 = (int) (Math.random() * population.rows());
				double[] newChild = new double[291];
				for(int x = 0; x < numGenes; x++) {
					if (Math.random() <= crossoverRate) {
						newChild[x] = population.row(parent1)[x];
		            } 
					else {
						newChild[x] = population.row(parent2)[x];
		            }
				}
				population.addRow(newChild);
			}
			numIterations++;
			//population.printMatrix();
		}
		printWeights(population.row(0));
		return population.row(0);
	}
	
	public static void printWeights(double[] weights)
	{
		for(int i = 0; i < weights.length; i++)
		{
			if(i%50 == 0)
				System.out.println();
			System.out.print(weights[i] + ", ");
		}
		System.out.println();
	}

	public static void main(String[] args) throws Exception
	{
		double[] myWeights1 = {
				1.0, 0.054174371441121166, -0.016050841974159097, 0.006084448626418206, 0.005902970627060465, 0.045889484446176305, 0.061003499401882676, 0.0281091479310685, 1.0, 0.021149769697494554, 0.02320486603899584, 1.0, -0.036456497056809076, 0.03314552621092503, 1.0, -0.004136428088812906, 1.0, -0.0011380277186662088, -0.06850283529687853, 0.0, -0.024564637296095464, 1.0, 0.0029341997824518153, 1.0, 0.038829239120191955, -0.04284872424544403, 0.0, 1.0, 0.0, 1.0, 0.03701114545448707, -0.0032566514032664274, 0.01683835489926337, -0.005731784430569487, 0.0021654817752144438, 0.05410923125422055, -0.006645417849474991, 1.0, 0.020750680600276756, 1.0, 0.0, 0.0024380775008466258, 0.0607821471772566, 0.03050382624472778, -0.04246768555963924, -0.02220273170716386, 0.024237732212768613, -0.08070356847945721, 1.0, 0.007623330536745307, 
				0.026434246292467534, 0.0, 0.0, 0.0, -0.001570383047297064, 1.0, -0.01247176530126442, 0.0, 0.0, 0.00828670932648761, -0.02776098027355098, 0.0, 0.031143639569081408, -0.026326917923289776, 0.03179428188357303, -0.018136036260476038, 0.001100595080648435, 0.0, -0.002410989855779479, 1.0, -0.001120072265551674, 0.018252685426425667, 0.0, 1.0, 0.018929845043742958, 0.0, 0.008178781905019064, 0.03585732699316957, 0.019498725534159708, -0.021785778015755954, 0.04323807811986108, 1.0, -0.0207185015690963, -0.0040622569143682185, 0.014354084102979723, -0.03712698033139954, 0.0, 0.0, 0.03383591461942534, 1.0, -0.010302825857344053, 0.0, 0.04741051006039631, 0.017213569728328684, 1.0, -0.008795042319364094, 1.0, -0.005156106295272298, 0.011683734476247667, 0.024577276750358708, 
				0.0, 1.0, 0.0, 0.06062231691866529, 0.0, -0.001956982965505589, 1.0, -0.005726585997711588, 0.028270042418087418, 1.0, 0.0, 0.0, 1.0, 0.018478902291230122, 1.0, -0.0307233657487989, 1.0, 0.0, -0.012036264035563893, -0.03165717639741103, -0.038513729505808225, 0.0, 1.0, 1.0, 0.06124068687713608, 0.0, -0.012242575983533876, 0.01824993991870961, 0.039936005729847616, -0.018538856884979436, -0.02485492935552514, -0.0016620822896454394, 1.0, 0.023502363687090105, 1.0, -0.04235718410270823, 0.0017300799177727506, 1.0, 0.0, -0.03847421363029937, 1.0, 0.002174011282493596, -0.018202247367523284, 1.0, 0.06911008600813044, 0.02883140981600493, -0.04601723356903792, 0.0, -0.03205180820459457, -0.013701658186955902, 
				-0.0045052903118840614, 0.01178311802948039, 1.0, 0.0, 0.0, 0.033176250534569546, -0.009182577406146496, 0.03161635012367024, 0.021030727546213424, 0.02270400689616497, 0.0, 1.0, -0.047825025219831126, 0.05649511965834769, 1.0, -0.017480440739838198, -0.024007436622229622, 0.026846977801241307, 0.0, 0.015146375142427945, 0.0, -0.024652245101074798, 0.0, -0.006094655915030644, 0.004754128480921625, -0.050502791218865334, -0.003033744322260747, -0.006625737239359401, -0.016600807686605493, 0.02722728311344007, -0.013992279978572518, 0.0, -0.015139518161418057, 0.0, 1.0, 1.0, 1.0, 0.0, -0.012848170636637542, -0.011898768356482722, 1.0, -0.03006369493387868, 0.0015197590440310484, -0.03013737628175757, 8.975430081279338E-4, -0.03230645015925872, -0.006876836420480578, 0.0, 0.009051726091868705, -0.04160145872292602, 
				1.0, 1.0, 1.0, 0.0, 0.030488444506882154, -0.02973890315119102, 3.4189035988745926E-4, 1.0, 1.0, 0.0336254549813921, 1.0, 0.026592547463259588, -0.027816507941664372, 0.04402862776408263, 0.02995979222701188, -0.021556445773504483, 0.01450819140661536, 0.0, -0.004352573211115623, -0.026865639018131295, 0.004553391778569847, 0.034390383723246355, -0.02217483764789214, 1.0, 0.021751644772980836, 1.0, 0.020972359175625534, 0.0166381180706859, 0.0, 0.028127951899577334, 0.03429718105130309, -0.010188138439845127, 0.060080371217765105, 0.004077161679035527, 0.018015732085329667, -0.030787315614237816, 0.0, 0.028915794880360595, 1.0, 0.0, -0.008657973153934894, 0.005893495825394017, 0.06743434547159247, 1.0, -0.03516375840943727, 0.03013996952776626, -0.04437448853279047, 1.0, 0.0, 1.0, 
				0.008183710403294088, -0.007833790029727996, -0.0358124556092517, 0.027513593248700743, -0.028062321026421696, 0.0, 0.003951078098237598, 0.026185471144384676, 0.06373836639613867, -0.0065403261673846755, 0.008051229332113526, 0.05289686173314359, -0.011959014473060428, -5.566733784003308E-4, -0.03981993826956911, -0.03178460013185612, -0.029376524272088648, -0.04118132813413194, 1.0, -0.01810100297543621, -0.025322627464271438, -0.024518712703645605, 1.0, 0.014778287079766311, 0.0, 0.0, 0.0, -0.032218210394873534, -0.0296970955003404, 0.0, 0.07454424103374321, 0.0035288860248449006, -0.0322147842351977, 0.0, 0.0, 0.008741552688289257, 0.0, -0.026675576383626047, 0.009064225930807922, 0.005206231760206251, 0.03800242899823472, 
		};
		//double[] w = evolveWeights();
		Controller.doBattle(new ReflexAgent(), new NeuralAgent(myWeights1));
	}
}
