package HW3;
import java.util.ArrayList;
import java.util.Random;

class Game
{
	static int populationSize = 20;
	static int numGenes = 291;
	static double mutationRate = 0.2;
	static double crossoverRate = 0.7;
	static double winnerSurvivalRate = 0.75;
	
	static double[] evolveWeights() throws Exception
	{
		// Create a random initial population
		Random r = new Random();
		Matrix population = new Matrix(populationSize, numGenes);
		for(int i = 0; i < populationSize; i++)
		{
			double[] chromosome = population.row(i);
			for(int j = 0; j < chromosome.length; j++)
				chromosome[j] = 0 + r.nextGaussian()*3;
		}
		
		int numIterations = 0;
		//while(numIterations < 20) {
		while(Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(population.row(0))) != -1) {
			System.out.println("Generation " + (numIterations+1));
			//mutate current population
			for(int y = 0; y < populationSize; y++) {
				for(int x = 0; x < numGenes; x++) {
					if(Math.random() <= mutationRate) {
						population.changeValue(x, y, r.nextGaussian());
					}
				}
			}
			
			//Natural selection: have two random ones fight, one wins and one dies
			for(int i = 0; i < populationSize * 0.3; i++) {
				int fighter1 = (int) (Math.random() * population.rows());
				int fighter2 = (int) (Math.random() * population.rows());
				while( fighter1 == fighter2)
					fighter2 = (int) (Math.random() * population.rows());
				if(Controller.doBattleNoGui(new NeuralAgent(population.row(fighter1)), new NeuralAgent(population.row(fighter2))) == 1) {
					if(Math.random() < winnerSurvivalRate)
						population.killRow(fighter2);
					else
						population.killRow(fighter1);
				}
				else if(Controller.doBattleNoGui(new NeuralAgent(population.row(fighter1)), new NeuralAgent(population.row(fighter2))) == -1){
					if(Math.random() < winnerSurvivalRate)
						population.killRow(fighter1);
					else
						population.killRow(fighter2);
				}
				else {
					if(Math.random() < 0.5)
						population.killRow(fighter1);
					else
						population.killRow(fighter2);
				}
					
			}
			
			//Make new babies to fill in the deaths (using crossover)
			int numReplacements = populationSize - population.rows();
			for(int i = 0; i < numReplacements; i++) {
				int parent1 = (int) (Math.random() * population.rows());
				int parent2 = (int) (Math.random() * population.rows());
				while( parent1 == parent2)
					parent2 = (int) (Math.random() * population.rows());
				double[] newChild = new double[291];
				for(int x = 0; x < numGenes; x++) {
					if (x <= numGenes * crossoverRate) {
						newChild[x] = population.row(parent1)[x];
		            } 
					else {
						newChild[x] = population.row(parent2)[x];
		            }
				}
				population.addRow(newChild);
			}
			numIterations++;
			//population.printMatrix();
		}
		printWeights(population.row(0));
		return population.row(0);
	}
	
	public static void printWeights(double[] weights)
	{
		for(int i = 0; i < weights.length; i++)
		{
			if(i%50 == 0)
				System.out.println();
			System.out.print(weights[i] + ", ");
		}
		System.out.println();
	}

	public static void main(String[] args) throws Exception
	{
		//These weights came from 30 generations
		double[] myWeights1 = {
				0.7450585270623429, -0.3454401426047861, -3.532620808197829, -0.12023249785453372, 2.0948651490210475, 2.201979552117856, 2.7465445944702362, -3.606425727960429, 1.2249432348450893, -0.615979850342607, -1.7339477268711216, -4.361147439683859, -7.032020933352813, 2.4354953191797963, 1.8164698311348273, 0.7388490079370962, -1.939273001354358, -4.99103782753349, -2.093044432439576, -5.260810804196355, -0.020404693557684594, -0.7138852943432294, -3.963445381608551, -2.6513213722015814, -1.112666761778941, -4.828598259082053, -5.031301212274599, 2.8037138608689833, 3.183735803533539, -0.5427315669489656, 1.5494864712251069, -1.7987044576571751, -1.9890789951298222, 5.41664312756248, -2.859887632170098, -0.43933867758985057, -12.098442313310269, 0.4554172628825157, -5.252444688246884, 2.3774341540547534, -2.7453962812676007, 0.5066707182627521, -2.043929801242441, -3.4746098758838126, 0.2929317796782079, 2.3003960206342473, 2.3680913295653347, 0.2604082148778197, 3.4646987824173814, -6.6196528772928875, 
				-6.476353689570249, 1.2486904190300732, 1.8029824404008923, 0.005116034443187534, -1.5151942764484159, -3.23659345627572, 0.6996064211040349, -1.1904529200732645, 5.366653772647717, 4.707058333393445, 1.00287974661078, 5.349755220000169, -2.105945488867538, 2.5727073984255098, -1.6233217633213448, 2.3769422013492445, 0.15133766857990139, -0.02244152010458389, 0.8029195414607078, 0.9456646182273719, 2.804489165667303, 0.6942921662130677, 3.637052824191587, 2.8725935537980183, 3.088714180012565, 0.7990988758064856, -0.23652830145774129, -1.1177474569408468, 3.7666247695984607, 1.783506925796404, 2.0555026112693975, -1.2030489401227193, 1.6074239420611505, -4.508882918106544, -3.147258994044261, 4.32179709310167, -1.9781928506212496, 0.3168344009907634, 1.6304052762364114, 0.029307649587021367, -3.1680672640630783, 1.4879483378796232, -5.714750180779582, -0.056460504328911476, -5.548969424072766, 2.6713418508885347, -3.70863653650677, -1.9362592586301652, -1.921384974104805, -0.2710988475264132, 
				1.072155345793402, 3.1651953532166854, 4.498321251705802, 0.39100467723669974, -0.26433917217213876, -7.6443686186777295, 2.8863761337607805, 5.646437881601109, -0.8182209043344699, -7.016848985788053, -0.8607165827556558, -1.5802248704005106, 7.422204130206959, 1.412344706392496, -2.3050085791158716, -1.6818834136299645, -0.4027147237973874, -4.99394546439917, -3.268739069966178, 2.578129004807122, -3.1186710499151453, 1.5757307984408904, -2.8943299032407115, -0.31319527619411636, -2.771666577794245, -4.9387377955357525, -1.1603834837812461, 3.7221435529765934, -0.3716050138631244, -0.8585368420106252, -0.9769566612585745, -2.6587351858490376, -1.5077839378506699, -5.967861772738731, -0.658490890102119, -2.3716721649796, 2.197576172385082, 0.5348499663657855, -1.309149827379001, -3.1081950375707397, -5.4693199345007955, -0.33343664550547003, 3.5125546676951167, 0.989263087541316, 5.349391693745857, -4.748749398956467, -4.032338160619627, -1.8614477301470296, 1.7417615368108568, 3.526521297257923, 
				0.4067235278095003, -2.298398218700218, -1.2154316253515747, 2.2781349702813016, 0.9923583287761382, -0.5472449117901664, 1.2026342566825536, 2.1124953279729426, -0.3956377266617575, 3.0847031755135257, 9.674870158770155, 0.5430792401702532, -2.1695051179067395, -1.994638761706739, 1.3148951397025623, 7.029392543058602, -1.065662365730137, -1.8341989869955064, 2.594683537163233, -1.8789246284109673, -3.9894648486685447, -1.7355461826684802, 6.170177053843033, -0.9476087014876311, -3.041662594869524, 6.917116360766325, -3.6083404022082224, 2.4241042165520525, -3.7884141897736763, 0.13772733751615296, -2.9645137218050737, 6.0800734917358525, -2.031607341708021, -0.6246328150027026, -1.9483408686604917, -2.6207111574037043, 3.6774718346093827, -4.515371081213129, -1.0684319413415029, -6.538610965662695, -0.6303836867753212, -3.640838238523222, 4.656756888318657, 2.3419569780616065, -2.913749539412762, -2.9668170592753285, 7.545532877350517, 2.962557079487011, 2.085456981924289, 2.0058079140822556, 
				3.6286931327271867, -2.4784351209350763, -1.96184599727512, 0.5545342020037387, 3.0774133805480233, 2.1192984182537002, 1.7899075877731183, 0.07749020951319774, 1.2728180994905987, 4.109683164741348, -1.0198775739455463, 2.766678321016581, 0.7634844091940627, 2.838882366440815, 2.388972462547633, -0.4920285491177031, -2.4809480559032933, -2.845113416222572, -3.110888826643208, -6.305937546922733, 1.3624518180073248, 5.714552920843191, -4.000095051587178, -3.632291154740963, -3.11184839132281, -6.404050249599891, 1.443270731275565, 0.8615260701526286, -4.729196677169702, -0.6009175087467387, -0.448768718323985, -0.39443142687516863, -4.638767956735093, -1.5291032988985842, -7.739459435906235, -1.4163741847589244, 10.45140704408176, 0.5059423405333815, 4.616379958458887, 4.993338159748955, 5.998673446693205, -2.15298983797415, 6.435143883157224, 5.912121945116233, -6.874707075636684, -5.751064706755653, 4.906331018414786, 4.3957406149695615, -1.0065163790092488, 5.702697366118468, 
				-3.390476027385378, -3.0590119407491634, 1.1612808155864047, -0.2058471415160652, 1.1997811991099898, 2.3725815085943522, 3.5998471962027447, -2.169332019041828, 0.6925522182069337, -1.052469916946668, -6.7229452171250506, -2.1963054427391437, 3.44438048875335, -5.959446102755053, -4.773878687471752, -5.076206572894737, 0.0031500640112444023, -2.903216877891503, -1.6707345396645576, -0.9778575423342728, 2.580953864371412, 8.5938428591355, 1.4856481047971413, 1.6812221818754534, 2.2354412139090694, -3.852803302237187, -1.3425027282785615, 5.0242930114070505, 2.481469791491316, 5.019293442016961, 0.2739924300300959, -7.0629700767206725, 4.62230696273669, 0.40900714120050463, -3.118907980571042, 5.919441397301757, 8.145193726019901, -8.531617667705945, 1.3630821740732044, -3.3093357624031867, -4.022286526830679, 
		};
		double[] w = evolveWeights();
		Controller.doBattle(new ReflexAgent(), new NeuralAgent(w));
	}
}
