package HW3;
import java.util.ArrayList;
import java.util.Random;

class Game
{
	static int populationSize = 20;
	static int numGenes = 291;
	static double mutationRate = 0.2;
	static double crossoverRate = 0.7;
	static double winnerSurvivalRate = 0.75;
	
	static double[] evolveWeights() throws Exception
	{
		// Create a random initial population
		Random r = new Random();
		Matrix population = new Matrix(populationSize, numGenes);
		for(int i = 0; i < populationSize; i++)
		{
			double[] chromosome = population.row(i);
			for(int j = 0; j < chromosome.length; j++)
				chromosome[j] = 0 + r.nextGaussian()*3;
		}
		
		int numIterations = 0;
		//while(numIterations < 20) {
		while(Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(population.row(0))) != -1) {
			System.out.println("Generation " + (numIterations+1));
			//mutate current population
			for(int y = 0; y < populationSize; y++) {
				for(int x = 0; x < numGenes; x++) {
					if(Math.random() <= mutationRate) {
						population.changeValue(x, y, r.nextGaussian());
					}
				}
			}
			
			//Natural selection: have two random ones fight, one wins and one dies
			for(int i = 0; i < populationSize * 0.3; i++) {
				int fighter1 = (int) (Math.random() * population.rows());
				int fighter2 = (int) (Math.random() * population.rows());
				while( fighter1 == fighter2)
					fighter2 = (int) (Math.random() * population.rows());
				if(Controller.doBattleNoGui(new NeuralAgent(population.row(fighter1)), new NeuralAgent(population.row(fighter2))) == 1) {
					if(Math.random() < winnerSurvivalRate)
						population.killRow(fighter2);
					else
						population.killRow(fighter1);
				}
				else if(Controller.doBattleNoGui(new NeuralAgent(population.row(fighter1)), new NeuralAgent(population.row(fighter2))) == -1){
					if(Math.random() < winnerSurvivalRate)
						population.killRow(fighter1);
					else
						population.killRow(fighter2);
				}
				else {
					if(Math.random() < 0.5)
						population.killRow(fighter1);
					else
						population.killRow(fighter2);
				}
					
			}
			
			//Make new babies to fill in the deaths (using crossover)
			int numReplacements = populationSize - population.rows();
			for(int i = 0; i < numReplacements; i++) {
				int parent1 = (int) (Math.random() * population.rows());
				int parent2 = (int) (Math.random() * population.rows());
				while( parent1 == parent2)
					parent2 = (int) (Math.random() * population.rows());
				double[] newChild = new double[291];
				for(int x = 0; x < numGenes; x++) {
					if (x <= numGenes * crossoverRate) {
						newChild[x] = population.row(parent1)[x];
		            } 
					else {
						newChild[x] = population.row(parent2)[x];
		            }
				}
				population.addRow(newChild);
			}
			numIterations++;
			//population.printMatrix();
		}
		printWeights(population.row(0));
		return population.row(0);
	}
	
	public static void printWeights(double[] weights)
	{
		for(int i = 0; i < weights.length; i++)
		{
			if(i%50 == 0)
				System.out.println();
			System.out.print(weights[i] + ", ");
		}
		System.out.println();
	}

	public static void main(String[] args) throws Exception
	{
		//These weights came from 50 generations
		double[] myWeights1 = {
				3.19770780951669, 11.315870572043975, -2.6237778071556446, -3.083560224222733, 0.05078284952908957, -1.3096633952912955, -6.184471040143912, 3.9498314963753276, -4.125723246527447, 1.3931670446729616, -7.938857350602953, 1.7799401102120043, 1.6367608829837643, 1.0473838043437034, 2.2584956424811233, 3.610813987535394, 0.3303723194662328, 4.888670958400592, -2.827902292101095, 1.975646212420106, -0.8657465207375374, 10.001156011942975, -1.3745306580048515, -5.563988199879837, 1.5677253401884248, -3.7568115851217363, -2.0768166443774287, 2.4999063771009085, -1.225040994507141, -4.101615773652542, -0.3532176006710279, 5.974597730009585, -2.74464265275341, 0.6765016964627305, -2.0782243360080366, 0.677711913366263, 4.825990959963229, -1.256104738585874, -0.058413664955594524, 2.22843734469099, 2.014357429832546, 1.7011461703430286, -2.0340440225707153, 3.4980275573285953, -13.380275046683582, 1.4318286734321741, -4.0940833883931305, -0.6024445539588655, 1.3873852300936451, -6.812920277830791, 
				-3.647974308555717, 2.0190992153401437, 0.2555671316773367, -10.668047929269944, 3.233106336701568, 4.52165767809587, -2.739634374165739, 5.6841544858938, -0.5346953650376554, 1.550189863603905, -1.109635356705347, -0.11730681500161899, 1.8908755571732274, -0.6419991591098538, -3.4557898648553844, 4.771259652110696, -1.709135889575329, 4.302129455736571, 4.263457825636321, -2.3568619821426235, -4.3838493101485305, -0.11460529240405437, -4.896511372265458, 1.7614380502823603, 4.31249320506791, 0.38923702796797155, 1.0402754440715343, 3.7809985685856553, -5.136770471632152, 4.6155043745260205, 1.223775983016032, 0.1432704727083982, 2.7344808479216596, 1.5308493495373112, -4.423712043604093, -1.269644405239542, -1.6818715037244343, -1.3332960176486544, 5.011929754350744, -12.653526254068911, -0.01032091341207686, 3.4995966421605984, -0.8105314968208166, -3.262873902517282, -2.183456225486365, 0.5752751400566058, -2.638114271290262, -4.2531188274662615, -5.302385787540293, -4.057678262941182, 
				-0.8060597825034842, -2.7081875177973647, -4.369098234558245, -6.041055649575828, 0.40291966350790487, 2.7085237025350577, -1.7317412990623102, 1.0835278937041128, 2.19306754469513, -2.662824494971428, -1.9950882402867074, -3.4457528450239456, -1.260526687950154, -4.423563423004013, -2.9113989723873264, 1.6737138911292306, -2.575597248367231, 7.504070180577568, -2.6981501049376906, -4.5875882429901855, -1.9462336452928397, 2.0161683968209467, 2.500055946587977, -4.074309526171611, 10.69172301745041, -0.557233013696623, -1.3102824650520541, -7.892221577040898, 1.747126202034131, -8.552042034893798, 0.7391694338052507, -2.5731499703151375, 3.034301125142738, 1.1956187047280222, 0.9973069751952643, 2.192100799281409, -4.827276249582921, 0.9770739723881238, 5.018456076219895, 11.298536039373111, -8.544270603398145, -0.7323947940333424, 5.425658835302039, -2.0253920924947053, 2.197850910056826, -1.9301663694435156, 0.3808480323288881, 4.857472496002759, -1.2869652284083004, 5.940729372235739, 
				6.4202444458746735, 5.105884667076541, -5.553210524578368, 0.46415237236048057, -0.5750401939476022, 6.182423118777054, -0.7097713343597061, 5.835409782845805, 4.81263439032741, -1.995807563495965, -9.917502597565491, 2.8066882835963103, -1.4683568690382678, -4.062678060533412, -0.48326515943229986, -1.5798979927751011, 0.8864274035692462, -0.4464733082002148, -2.7857251545222086, 4.292543371593074, -1.5117967932202616, 7.865420361551895, 7.789629226960109, -1.0556369942415444, 9.558702560216975, -3.316264084861619, -3.8193252973837466, -7.6179028751778075, -2.5677152228856897, 0.20595009191086977, -0.99170818149804, -0.03879512690867437, -0.19287833103076957, -2.8738148894105926, -0.44692959275575284, -0.323329490785495, -4.8103607530177115, 3.1233151689522556, 1.0739803053613728, -1.289444106090618, -0.8114636763960352, 1.8985093632098828, -6.475606029015683, 0.315509433156351, 1.1864111620965003, 3.1915423626321133, 0.3214732185383047, -2.8548431376108443, -0.4850623329082433, 0.6607496651793805, 
				0.09892092077793146, -0.6033327951702637, 0.5761538736645174, -5.7762750124372495, 7.257846488976481, 7.599392011124553, 1.353744015118455, 0.2696666159475154, 2.853674519544155, -2.0111742698235653, -2.0438082532626534, 8.377086711183564, -1.3815734905400205, -3.0169087602232407, -0.43677135020915236, 0.24892727801099263, -6.679154986790753, -5.7272547372931415, 4.274926668937949, 6.688402911209581, 2.3578460961277212, 0.538013652906664, 0.1901837329735932, -0.6235944141955414, -2.1805692596953588, -2.273097252016083, -2.996365561233567, 4.844315780547379, -0.8855655512814011, 2.0115393756703983, -4.523195310267287, -6.692201489978238, 0.5963271378050222, -6.022545921517697, 0.444105633169272, 1.9465025929733235, 0.2032635477464293, -1.9288703458419048, 9.401395932876934, -5.938455312943693, -0.3470446722113618, 1.0421898690383091, 7.578541157266892, 1.6910735231664589, -5.111845105396415, -7.087220642713477, 0.9551049963204017, -3.5924131154145362, -3.67889101802493, -1.043521355115344, 
				-0.3023474574698892, 4.017641757907752, -0.6147470770646594, 5.438956508307741, -2.670438795939883, 0.9454929173943978, 1.3647866409633764, -5.034683445649946, 5.917465524121734, -5.7079065617037585, 0.10653559388873113, -0.57518068769123, -2.1487264455161323, 0.9973304191979742, 4.626330161089069, 2.1666064078137617, -11.176023785362498, -4.362460136683124, -5.107715202722059, 0.36971682088401536, 1.3095230751266143, 6.834924739815115, -3.689637757011079, -2.9546774199518087, -2.248902587104888, 2.6166500770849055, -9.270433274361286, -6.561716572729605, 6.172340360550912, -1.838224690866526, -4.586332242164184, -0.3037569008846659, 0.900274138622132, 6.226583538893195, 2.0904583534718117, -0.8743233955179484, -1.107020258187717, -7.314406783878665, 0.4018061012520471, 5.072377960474868, 0.8493675481529642, 
		};
		double[] w = evolveWeights();
		Controller.doBattle(new ReflexAgent(), new NeuralAgent(w));
	}
}
